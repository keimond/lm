<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
  <kmsKeyId></kmsKeyId>
  <pkdsRegion></pkdsRegion>
    <entry type="predatasource">
        <version>1706012208</version>
        <name>Service_restart</name>
        <displayedas>Services Monitored and Restarted</displayedas>
        <description>restart service if needed. 1=already running, 2=first restart succeeded, 3=second try succeeded, 4=second try failed</description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <useWildValueAsUniqueIdentifier>true</useWildValueAsUniqueIdentifier>
        <schedule>360</schedule>
        <appliesTo>isWindows() &#38;&#38; Service_restart.services &#38;&#38; EMS_Managed_Servers()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>$hostname = &#39;##HOSTNAME##&#39;
$username = &#39;##wmi.user##&#39;
$password = &#39;##wmi.pass##&#39;
if($username -and $password){
  $securePassword = $password | ConvertTo-SecureString -AsPlainText -Force
  $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)
}
$prop = &#39;##Service_restart.services##&#39;

$splitprops = $prop.split(&#34;,| &#34;,[System.StringSplitOptions]::RemoveEmptyEntries)
$processedServices = @{} # Hashtable to store processed services

# Get all services once
$allServices = Get-WmiObject -Class Win32_Service -ComputerName $hostname -Credential $credential

Foreach ($i in $splitprops){
    Try {
        $services = $allServices | Where-Object { $_.Name -eq $i }
        if (-not $services) {
            $services = Get-Service -name $i -ComputerName $hostname
        }
        Foreach ($service in $services) {
            if (-not $processedServices.ContainsKey($service.Name)) { # Check if service name is not in hashtable
                &#34;$($service.Name)##$($service.DisplayName)##Windows Service-$($service.Name)&#34;
                $processedServices[$service.Name] = $true # Add service name to hashtable
            }
        }
    } Catch {
        Write-Host &#34;Error occurred while processing service &#39;$i&#39;: $_&#34;
    }
}
exit 0</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags>suding</tags>
        <technology>Written by M. Suding. Updated by S. Weenig. Added WMI statements, wildcard and optimization checks by Jared Meidal</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","locatorId":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"$hostname = '##HOSTNAME##'\r\n$username = '##wmi.user##'\r\n$password = '##wmi.pass##'\r\nif($username -and $password){\r\n  $securePassword = $password | ConvertTo-SecureString -AsPlainText -Force\r\n  $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)\r\n}\r\n$prop = '##Service_restart.services##'\r\n\r\n$splitprops = $prop.split(\",| \",[System.StringSplitOptions]::RemoveEmptyEntries)\r\n$processedServices = @{} # Hashtable to store processed services\r\n\r\n# Get all services once\r\n$allServices = Get-WmiObject -Class Win32_Service -ComputerName $hostname -Credential $credential\r\n\r\nForeach ($i in $splitprops){\r\n    Try {\r\n        $services = $allServices | Where-Object { $_.Name -eq $i }\r\n        if (-not $services) {\r\n            $services = Get-Service -name $i -ComputerName $hostname\r\n        }\r\n        Foreach ($service in $services) {\r\n            if (-not $processedServices.ContainsKey($service.Name)) { # Check if service name is not in hashtable\r\n                \"$($service.Name)##$($service.DisplayName)##Windows Service-$($service.Name)\"\r\n                $processedServices[$service.Name] = $true # Add service name to hashtable\r\n            }\r\n        }\r\n    } Catch {\r\n        Write-Host \"Error occurred while processing service '$i': $_\"\r\n    }\r\n}\r\nexit 0"},"version":""}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>$hostname = &#34;##HOSTNAME##&#34;
$username = &#39;##wmi.user##&#39;
$password = &#39;##wmi.pass##&#39;
$credential = $null
if($username -and $password){
  $securePassword = $password | ConvertTo-SecureString -AsPlainText -Force
  $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)
}
$service = &#34;##WILDVALUE##&#34;
$wait = 15 # seconds to wait

# Define a function to get service status
function Get-ServiceStatus($service, $hostname, $credential) {
  $service_status = (Get-Service -Name $service -ComputerName $hostname -ErrorAction SilentlyContinue).Status
  if (-not $service_status -and $credential) {
    $service_status = (Get-WmiObject -Class Win32_Service -Filter &#34;Name=&#39;$service&#39;&#34; -ComputerName $hostname -Credential $credential).State
  }
  return $service_status
}

# Try to get the service status
$service_status = Get-ServiceStatus -service $service -hostname $hostname -credential $credential

Write-Host &#34;$service is $service_status on $hostname&#34;

if ($service_status -eq &#34;Running&#34;) {
  Write-Host &#34;result_code: 1 (running)&#34;
} else {
  Write-Host &#34;not running so i will start then wait $wait seconds and test&#34;
  Start-Service -InputObject $(Get-Service -Computer $hostname -Name $service -ErrorAction SilentlyContinue)
  Start-Sleep $wait

  # Check the service status again
  $service_status = Get-ServiceStatus -service $service -hostname $hostname -credential $credential

  if ($service_status -eq &#34;Running&#34;) {
    Write-Host &#34;result_code: 2 (first restart worked)&#34;
  } else {
    Write-Host &#34;first restart failed so i will start second time&#34;
    Start-Service -InputObject $(Get-Service -Computer $hostname -Name $service -ErrorAction SilentlyContinue)
    Start-Sleep $wait

    # Check the service status again
    $service_status = Get-ServiceStatus -service $service -hostname $hostname -credential $credential

    if ($service_status -eq &#34;Running&#34;) {
      Write-Host &#34;result_code: 3 (second restart worked)&#34;
    } else {
      Write-Host &#34;result_code: 4 (second restart failed so probably trigger alert)&#34;
    }
  }
}</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>properties</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>manualConnections</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>result_code</name>
            <originId>ThEwx6GXREylsxSQnwF0jA</originId>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>regex</postprocessormethod>
            <postprocessorparam>result_code: (\d+)</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>&#62;= 2 4</alertexpr>
            <alertmissing>3</alertmissing>
            <alertsubject>Windows ##DSIDESCRIPTION## has failed to restart on ##HOST##</alertsubject>
            <alertbody>The Windows service ##INSTANCE## ##DSIDESCRIPTION## on host ##HOST## is now failing, the resource into ##LEVEL## level, as of ##START##.

This state has existed for ##DURATION##. Result codes are:
1=ok, 2=first restart worked, 3=second worked, 4=second failed

Emerge SOP: https://emerge.itglue.com/3247188/docs/14876583</alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description>1=ok, 2=first restart worked, 3=second worked, 4=second failed</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>runtime_ms</name>
            <originId>KpdzhxjnTzqCCLhqYrEP1w</originId>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>3</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <adadvsettingenabled>false</adadvsettingenabled>
            <warnadadvsetting></warnadadvsetting>
            <erroradadvsetting></erroradadvsetting>
            <criticaladadvsetting></criticaladadvsetting>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <maxdigits>4</maxdigits>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>1</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Service restart</name>
            <title>Service restart</title>
            <originId></originId>            <verticallabel>status 1=ok, 2=restart, 3=two restarts, 4=two restarts failed</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>1</displayprio>
            <timescale>1hour</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>result_code</name>
            <datapointname>result_code</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>result_code</legend>
                <color>blue</color>
                <datapointname>result_code</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Service restart runtime</name>
            <title>service restart runtime</title>
            <originId></originId>            <verticallabel>milliseconds</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>NaN</minvalue>
            <displayprio>2</displayprio>
            <timescale>1hour</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>runtime_ms</name>
            <datapointname>runtime_ms</datapointname>
            <originId></originId>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>runtime_ms</legend>
                <color>blue</color>
                <datapointname>runtime_ms</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>Status</name>
            <title>Status</title>
            <verticallabel>status 1=ok, 2=restart, 3=two restarts, 4=two restarts failed</verticallabel>
            <rigid>false</rigid>
            <maxvalue>5.0</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <originId></originId>
            <datapoints>
        <overviewgraphdatapoint>
            <name>result_code</name>
            <datapointname>result_code</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
            <originId></originId>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>4</type>
                <legend>##INSTANCE##</legend>
                <datapointname>result_code</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
